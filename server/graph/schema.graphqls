type Query {
    searchNear(email: String!): [DatingUser]!
    returnDetail(email: String!): [DetailUser]!
    returnFull(email: String!): FullUser!
}

type Mutation {
    createUser(input: NewUser!): token!
    login(input: Login!): token!
    refreshToken(input: RefreshTokenInput!): token!
    matchUsers(input: UsersToMatch): FullUser
}

type FullUser {
    id: ID!
    username: String!
    title: String!
    email: String!
    location: String!
    gender: GenderType!
    picture: String!
    company: String!
	FaveLangauge: String!
	FaveFramework: String!
	FaveTool: String!
}

type DetailUser {
    id: ID!
    username: String!
    title: String!
    location: String!
    gender: GenderType!
    picture: String!
    company: String!
	FaveLangauge: String!
	FaveFramework: String!
	FaveTool: String!
    match: MatchType!
}

type DatingUser {
    id: ID!
    username: String!
    title: String!
    location: String!
    gender: GenderType!
    picture: String!
	FaveLangauge: String!
	FaveFramework: String!
	FaveTool: String!
    match: MatchType!
}

input UserInput {
    _id: ID
    name: String!
    title: String!
    email: String!
    location: String!
    gender: GenderType!
    picture: String!
    company: String!
	FaveLangauge: String!
	FaveFramework: String!
	FaveTool: String!
}

enum GenderType {
   MALE
   FEMALE
   OTHER
}

enum MatchType {
   YES
   NO
   UNDECIDED
   IGNORE
}

type token {
    token: String!
}

input RefreshTokenInput{
    token: String!
}

input UsersToMatch {
    currentUserEmail: String!
    matchUserEmail: String!
}

input NewUser {
    username: String!
    email: String!
    password: String!
}

input Login {
    email: String!
    password: String!
}


type Skill {
    name: String!
    icon: String
    importance: Int!
}

input SkillInput {
    name: String!
    icon: String
    importance: Int!
}

