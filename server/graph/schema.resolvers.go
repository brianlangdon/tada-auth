package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	"github.com/brianlangdon/tada-auth/graph/model"
	"github.com/brianlangdon/tada-auth/internal/users"
	"github.com/brianlangdon/tada-auth/pkg/jwt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.Token, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	user.Email = input.Email

	created := user.Create()
	if !created {
		return nil, &users.UnableToCreateUserError{}
	}
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return nil, err
	}
	var retToken model.Token
	retToken.Token = token

	return &retToken, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (*model.Token, error) {
	var user users.User
	user.Email = input.Email
	user.Password = input.Password
	correct := user.Authenticate()
	if !correct {
		return nil, &users.WrongUsernameOrPasswordError{}
	}
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return nil, err
	}

	var retToken model.Token
	retToken.Token = token

	return &retToken, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (*model.Token, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return nil, fmt.Errorf("access denied")
	}
	token, err := jwt.GenerateToken(username)
	if err != nil {
		return nil, err
	}
	var retToken model.Token
	retToken.Token = token

	return &retToken, nil
}

// MatchUsers is the resolver for the matchUsers field.
func (r *mutationResolver) MatchUsers(ctx context.Context, input *model.UsersToMatch) (*model.FullUser, error) {
	panic(fmt.Errorf("not implemented: MatchUsers - matchUsers"))
}

// SearchNear is the resolver for the searchNear field.
func (r *queryResolver) SearchNear(ctx context.Context, email string) ([]*model.DatingUser, error) {
	panic(fmt.Errorf("not implemented: SearchNear - searchNear"))
}

// ReturnDetail is the resolver for the returnDetail field.
func (r *queryResolver) ReturnDetail(ctx context.Context, email string) ([]*model.DetailUser, error) {
	panic(fmt.Errorf("not implemented: ReturnDetail - returnDetail"))
}

// ReturnFull is the resolver for the returnFull field.
func (r *queryResolver) ReturnFull(ctx context.Context, email string) (*model.FullUser, error) {
	// the user should exist as it's either the logged in user OR a dating match
	//
	var user model.FullUser
	user, _ = users.GetUserByEmail(email)

	return &user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
